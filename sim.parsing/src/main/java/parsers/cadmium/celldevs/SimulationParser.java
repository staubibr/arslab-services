package parsers.cadmium.celldevs;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.stream.Collectors;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import components.parsing.ISimulationParser;
import components.simulation.Grid;
import components.simulation.MessageCA;
import components.simulation.Messages;
import components.simulation.ModelCA;
import components.simulation.Port;
import components.simulation.Structure;
import components.simulation.StructureInfo;
import components.utilities.Helper;
import parsers.cadmium.celldevs.json.JsonModel;
import parsers.utilities.MA;

public class SimulationParser implements ISimulationParser {

	@Override
	public void SetInfo(Structure structure, HashMap<String, byte[]> files) {
		String name = Helper.FindName(files,  "message");
		
		StructureInfo info = new StructureInfo(name, "Cadmium", "Cell-DEVS");
		
		structure.setInfo(info);
	}
    
	@Override
	public Structure ParseStructure(HashMap<String, byte[]> files) throws IOException {
		Structure structure = new Structure();

		this.SetInfo(structure, files);

		InputStream json = Helper.FindFileStream(files, ".json");

		ObjectMapper mapper = new ObjectMapper();
		
		// TODO : Temp until file is reviewed
		JsonNode node = mapper.readTree(json);
		
		json.close();
		
		JsonModel jModel = mapper.treeToValue(node.get("scenario"), JsonModel.class);
		
		ModelCA sModel = new ModelCA(jModel.getName(), ModelCA.Type.COUPLED, null, new Grid());
			
		structure.AddModel(sModel);
		
		sModel.getGrid().setSize(jModel.getSize());
				
		List<Port> ports = jModel.getPorts().stream().map(p -> new Port(sModel, p.getName(), Port.Type.OUTPUT, null)).collect(Collectors.toList());
		
		structure.AddPorts(ports);
		
		sModel.setTemplate(MA.GetTemplate(ports));
		
		return structure;
	}

	@Override
	public Messages ParseResults(Structure structure, HashMap<String, byte[]> files) throws IOException {
		InputStream log = Helper.FindFileStream(files, "message");
		
		Messages output = new Messages();
		
		List<MessageCA> messages = new ArrayList<MessageCA>();
		
		Helper.ReadFile(log, (String l) -> {
			// [cadmium::celldevs::cell_ports_def<std::vector<int, std::allocator<int> >, co2>::cell_out: {(37,56) ; <-1,-10,2>}] generated by model CO2_model_(37,56)
			if (l.startsWith("[")) {
				int i = l.indexOf(']') + 1;
				
				// [cadmium::celldevs::cell_ports_def<std::vector<int, std::allocator<int> >, co2>::cell_out: {(37,56) ; <-1,-10,2>}]
				String left = l.substring(0, i);

				// cadmium:celldevs:cell_ports_def<std:vector<int,std:allocator<int>>,co2>:cell_out:{(37,56);<-1,-10,2>}
				String clean = left.substring(1, left.length() - 1).replace(" ", "").replace("::",  ":");

				// cadmium:celldevs:cell_ports_def<std:vector<int,std:allocator<int>>,co2>:cell_out:{(37,56);<-1,-10,2>
				Arrays.stream(clean.split("\\}")).forEach(s -> {
					// Sender_defs:packetSentOut:{1}
					String[] e = s.split(":");
					
					// 37,56;-1,-10,2
					String[] data = e[e.length - 1].replaceAll("\\(|\\)|\\{|\\}|<|>", "").split(";");					

					String[] sC = data[0].split(",");
					
					int[] coord = new int[3];

					coord[0] = Integer.parseInt(sC[0]);
					coord[1] = Integer.parseInt(sC[1]);
					coord[2] = (sC.length == 2) ? 0 : Integer.parseInt(sC[2]);
					
					messages.add(new MessageCA(output.getTimesteps().size() - 2, structure.getNodes().get(0), coord, data[1]));
				});
			}
			
			else output.getTimesteps().add(l);
		});
		
		log.close();
		
		// Cadmium has an extra timestep 0
		output.getTimesteps().remove(0);

		output.setMessages(messages);
		
		return output;
	}
	
	@Override
	public Boolean Detect(HashMap<String, byte[]> files) throws IOException {
		// [cadmium::celldevs::cell_ports_def<std::vector<int, std::allocator<int> >, co2>::cell_out: {(37,56) ; <-1,0,-300>}] generated by model co2_lab_(37,56)
		InputStream messages = Helper.FindFileStream(files, "message");
		// InputStream states = files.FindStream("state");

		// TODO : For now, only messages is mandatory, states is not used. This is just a port of what we had client side.
		// Eventually, this should work with either of the files but one at least. We want to be able to handle messages 
		// exchanges or model states, but at least one or the other
		// if (messages == null && states == null) return false;
		if (messages == null) return false;
		
		List<String> lines = Helper.ReadNLines(messages, 3);

		messages.close();
		
		return lines.get(2).contains("cadmium::celldevs") && lines.get(2).contains("std::vector");
	}
}
