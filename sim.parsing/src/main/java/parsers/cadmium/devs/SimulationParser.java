package parsers.cadmium.devs;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

import com.fasterxml.jackson.databind.ObjectMapper;

import components.parsing.ISimulationParser;
import components.simulation.Link;
import components.simulation.Message;
import components.simulation.Messages;
import components.simulation.Model;
import components.simulation.Port;
import components.simulation.Structure;
import components.simulation.StructureInfo;
import components.utilities.Helper;
import parsers.cadmium.devs.json.JsonModel;

public class SimulationParser implements ISimulationParser {

	@Override
	public void SetInfo(Structure structure, HashMap<String, byte[]> files) {
		String name = Helper.FindName(files,  "message");
		
		StructureInfo info = new StructureInfo(name, "Cadmium", "DEVS");
		
		structure.setInfo(info);
	}
    
	@Override
	public Structure ParseStructure(HashMap<String, byte[]> files) throws IOException {
		Structure structure = new Structure();

		this.SetInfo(structure, files);

		InputStream json = Helper.FindFileStream(files, ".json");
		
		ObjectMapper mapper = new ObjectMapper();
		
		JsonModel jModel = mapper.readValue(json, JsonModel.class);
		
		json.close();
		
		jModel.Traverse(m -> {
			Model.Type mType = m.getSubmodels().size() > 0 ? Model.Type.COUPLED : Model.Type.ATOMIC; 
			
			Model sModel = new Model(m.getName(), mType, null);
					
			structure.AddModel(sModel);
			
			m.getPorts().forEach(p -> {
				Port.Type pType = p.getType() == "output" ? Port.Type.OUTPUT : Port.Type.INPUT;
				
				structure.AddPort(new Port(sModel, p.getName(), pType, "[\"out\"]"));
			});
		});
		
		jModel.Traverse(m -> {
			m.getCouplings().forEach(c -> {
				c.setModel(m.getName());

				Port start = structure.FindPort(c.getModelA(), c.getPortA());
				Port end = structure.FindPort(c.getModelB(), c.getPortB());
				
				structure.getLinks().add(new Link(start, end));
			});
		});

		return structure;
	}

	@Override
	public Messages ParseResults(Structure structure, HashMap<String, byte[]> files) throws IOException {
		InputStream log = Helper.FindFileStream(files, "message");

		Messages output = new Messages();
		
		List<Message> messages = new ArrayList<Message>();

		Helper.ReadFile(log, (String l) -> {
			// [Sender_defs::packetSentOut: {1}, Sender_defs::ackReceivedOut: {}, Sender_defs::dataOut: {<1, 0>}] generated by model sender1
			if (l.startsWith("[")) {
				int i = l.indexOf(']') + 1;

				String left = l.substring(0, i);
				String right = l.substring(i); 
				
				// Read model name from right hand side
				String m = right.trim().split(" ")[3];
				
				// Process left hand side
				String clean = left.substring(1, left.length() - 1).replace(" ", "").replace("::",  ":");
				
				Arrays.stream(clean.split("\\}")).forEach(s -> {
					// Sender_defs:packetSentOut:{1}
					String[] e = s.split(":");
					
					String v = e[e.length - 1].replaceAll("\\{|\\}|<|>|\\s", "");					
					
					if (v.length() == 0) return;
					
					String p = e[e.length - 2];
													
					Port port = structure.FindPort(m, p);
															
					messages.add(new Message(output.getTimesteps().size() - 2, port, v.split(",")));
				});
			}
			
			else output.getTimesteps().add(l);
		});
		
		log.close();
				
		// Cadmium has an extra timestep 0
		output.getTimesteps().remove(0);

		output.setMessages(messages);
		
		return output;
	}

	@Override
	public Boolean Detect(HashMap<String, byte[]> files) throws IOException {
		// [cadmium::basic_models::pdevs::iestream_input_defs<int>::out: {5}] generated by model input_reader
		InputStream messages = Helper.FindFileStream(files, "message");
		// InputStream states = files.FindStream("state");

		// TODO : For now, only messages is mandatory, states is not used. This is just a port of what we had client side.
		// Eventually, this should work with either of the files but one at least. We want to be able to handle messages 
		// exchanges or model states, but at least one or the other
		// if (messages == null && states == null) return false;
		if (messages == null) return false;
		
		List<String> lines = Helper.ReadNLines(messages, 3);

		messages.close();
				
		return lines.get(2).contains("cadmium") && !lines.get(2).contains("cadmium::celldevs");
	}
}
