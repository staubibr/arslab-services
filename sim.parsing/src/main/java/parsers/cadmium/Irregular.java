package parsers.cadmium;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Stream;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import components.FilesMap;
import components.Helper;
import models.simulation.Message;
import models.simulation.Structure;
import models.simulation.StructureInfo;
import parsers.ILogParser;

public class Irregular implements ILogParser {
	
	@Override
	public Structure Parse(FilesMap files) throws IOException {
		Structure structure = ParseStructure(files.FindStream(".json"));
		
		structure.setInfo(new StructureInfo(files.FindName("message"), "Cadmium", "Irregular Cell-DEVS"));
		
		ParseLog(structure, files.FindStream("message"));
				
		return structure;
	}

	public Structure ParseStructure(InputStream json) throws IOException {	
		Structure s = new Structure();
		
		ObjectMapper mapper = new ObjectMapper();
		
		JsonNode node = mapper.readTree(json);
		
		json.close();
		
		List<String> fields = new ArrayList<String>();
		
		node.get("output").forEach(f -> fields.add("\"" + f.asText() + "\""));
		
		String template = "[" + String.join(",", fields) + "]";
		
		node.get("cells").forEach(cell -> {
			s.CreateModel(cell.get("cell_id").asText(), models.simulation.Model.Type.ATOMIC, template);
		});

		return s;
	}
	
	private void ParseLog(Structure structure, InputStream log) throws IOException {
		List<Message> messages = new ArrayList<Message>();
		
		Helper.ReadFile(log, (String l) -> {
			// [Sender_defs::packetSentOut: {1}, Sender_defs::ackReceivedOut: {}, Sender_defs::dataOut: {<1, 0>}] generated by model sender1
			if (l.startsWith("[")) {
				int i = l.indexOf('{') + 1;
				int j = l.indexOf('}') - 1;

				String[] content = Stream.of(l.substring(i, j).split(";")).map(s -> s.trim()).toArray(String[]::new);
				
				String name = content[0];
				String values = content[1].substring(1);
				
				messages.add(new Message(structure.getTimesteps().size() - 2, structure.FindNode(name), values));
			}
			
			else structure.getTimesteps().add(l);
		});
		
		log.close();
		
		// Cadmium has an extra timestep 0
		structure.getTimesteps().remove(0);
		
		structure.setMessages(messages);
	}
	
	
	public Boolean Validate(FilesMap files) throws IOException {
		// [cadmium::celldevs::cell_ports_def<std::string, sir>::cell_out: {Alta Vista ; <1,0.485,0.515,0,0.515,0,0>}] generated by model _Alta Vista

		InputStream messages = files.FindStream("message");
		// InputStream states = files.FindStream("state");

		// TODO : For now, only messages is mandatory, states is not used. This is just a port of what we had client side.
		// Eventually, this should work with either of the files but one at least. We want to be able to handle messages 
		// exchanges or model states, but at least one or the other
		// if (messages == null && states == null) return false;
		if (messages == null) return false;
		
		List<String> lines = Helper.ReadNLines(messages, 3);

		messages.close();

		return lines.get(2).contains("cadmium::celldevs") && !lines.get(2).contains("std::vector");
	}
}
